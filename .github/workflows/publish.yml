name: Publish

on:
  workflow_call:
    inputs:
      git_ref:
        type: string
        required: true
        # channel is the dir/namespace packages are organized into.
        # Options are release/nightly/custom.
      channel:
        type: string
        required: true

env:
  VERBOSE: true
  CI: true
  DISABLE_MOLD: true
  DEBIAN_FRONTEND: noninteractive
  CONTAINER_TOOL: docker
  CARGO_PROFILE_RELEASE_LTO: fat
  CARGO_PROFILE_RELEASE_CODEGEN_UNITS: 1
  # observing issues fetching boringssl via HTTPS in the OSX build, seeing if this helps
  # can be removed when we switch back to the upstream openssl-sys crate
  CARGO_NET_GIT_FETCH_WITH_CLI: true
  CHANNEL: ${{ inputs.channel }}

jobs:
  generate-publish-metadata:
    name: Generate Publish-related Metadata
    runs-on: ubuntu-20.04
    outputs:
      vector_version: ${{ steps.generate-publish-metadata.outputs.vector_version }}
      vector_build_desc: ${{ steps.generate-publish-metadata.outputs.vector_build_desc }}
      vector_release_channel: ${{ steps.generate-publish-metadata.outputs.vector_release_channel }}
    steps:
      - name: Checkout Vector
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.git_ref }}
      - name: Generate publish metadata
        id: generate-publish-metadata
        run: make ci-generate-publish-metadata

  build-x86_64-unknown-linux-musl-packages:
    name: Build Vector for x86_64-unknown-linux-musl (.tar.gz)
    runs-on: ubuntu-20.04
    needs: generate-publish-metadata
    env:
      VECTOR_VERSION: ${{ needs.generate-publish-metadata.outputs.vector_version }}
      VECTOR_BUILD_DESC: ${{ needs.generate-publish-metadata.outputs.vector_build_desc }}
      CHANNEL: ${{ needs.generate-publish-metadata.outputs.vector_release_channel }}
    steps:
      - name: Checkout Vector
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.git_ref }}
      - name: Bootstrap runner environment (Ubuntu-specific)
        run: sudo -E bash scripts/environment/bootstrap-ubuntu-20.04.sh
      - name: Bootstrap runner environment (generic)
        run: bash scripts/environment/prepare.sh
      - name: Build Vector
        run: make package-x86_64-unknown-linux-musl-all
      - name: Stage package artifacts for publish
        uses: actions/upload-artifact@v3
        with:
          name: vector-${{ env.VECTOR_VERSION }}-x86_64-unknown-linux-musl
          path: target/artifacts/vector*

  build-x86_64-unknown-linux-gnu-packages:
    name: Build Vector for x86_64-unknown-linux-gnu (.tar.gz, DEB, RPM)
    runs-on: ubuntu-20.04
    needs: generate-publish-metadata
    env:
      VECTOR_VERSION: ${{ needs.generate-publish-metadata.outputs.vector_version }}
      VECTOR_BUILD_DESC: ${{ needs.generate-publish-metadata.outputs.vector_build_desc }}
      CHANNEL: ${{ needs.generate-publish-metadata.outputs.vector_release_channel }}
    steps:
      - name: Checkout Vector
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.git_ref }}
      - name: Bootstrap runner environment (Ubuntu-specific)
        run: sudo -E bash scripts/environment/bootstrap-ubuntu-20.04.sh
      - name: Bootstrap runner environment (generic)
        run: bash scripts/environment/prepare.sh
      - name: Build Vector
        run: make package-x86_64-unknown-linux-gnu-all
      - name: Stage package artifacts for publish
        uses: actions/upload-artifact@v3
        with:
          name: vector-${{ env.VECTOR_VERSION }}-x86_64-unknown-linux-gnu
          path: target/artifacts/vector*


  deb-verify:
    name: Verify DEB Packages
    runs-on: ubuntu-20.04
    needs:
      - generate-publish-metadata
      - build-x86_64-unknown-linux-gnu-packages
    env:
      VECTOR_VERSION: ${{ needs.generate-publish-metadata.outputs.vector_version }}
    strategy:
      matrix:
        container:
          - ubuntu:16.04
          - ubuntu:18.04
          - ubuntu:20.04
          - ubuntu:22.04
          - ubuntu:23.04
          - debian:10
          - debian:11
          - debian:12
    container:
      image: ${{ matrix.container }}
    steps:
      - run: |
          apt-get update && \
          apt-get install -y \
          ca-certificates \
          curl \
          git \
          systemd \
          make
      - name: Fix Git safe directories issue when in containers (actions/checkout#760)
        run: git config --global --add safe.directory /__w/vector/vector
      - name: Checkout Vector
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.git_ref }}
      - name: Download staged package artifacts (x86_64-unknown-linux-gnu)
        uses: actions/download-artifact@v3
        with:
          name: vector-${{ env.VECTOR_VERSION }}-x86_64-unknown-linux-gnu
          path: target/artifacts
      - name: Verify install of DEB package.
        run: |
          ./scripts/verify-install.sh target/artifacts/vector_${{ env.VECTOR_VERSION }}-1_amd64.deb

  rpm-verify:
    name: Verify RPM Packages
    runs-on: ubuntu-20.04
    needs:
      - generate-publish-metadata
      - build-x86_64-unknown-linux-gnu-packages
    env:
      VECTOR_VERSION: ${{ needs.generate-publish-metadata.outputs.vector_version }}
    strategy:
      matrix:
        container:
          - "quay.io/centos/centos:stream8"
          - "quay.io/centos/centos:stream9"
          - "amazonlinux:1"
          - "amazonlinux:2"
          - "fedora:37"
          - "fedora:38"
          - "fedora:39"
    container:
      image: ${{ matrix.container }}
    steps:
      - run: |
          yum update -y
          yum install -y \
          ca-certificates \
          git \
          systemd \
          tar \
          make
          # conflicts with curl-minimal on some distros and --allowerased is not
          # supported on some distros
          if ! command -v curl &> /dev/null ; then
            yum install -y curl
          fi
      - name: Fix Git safe directories issue when in containers (actions/checkout#760)
        run: git config --global --add safe.directory /__w/vector/vector
      - name: Checkout Vector
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.git_ref }}
      - name: Download staged package artifacts (x86_64-unknown-linux-gnu)
        uses: actions/download-artifact@v3
        with:
          name: vector-${{ env.VECTOR_VERSION }}-x86_64-unknown-linux-gnu
          path: target/artifacts
      - name: Verify install of RPM package.
        run: |
          ./scripts/verify-install.sh target/artifacts/vector-${{ env.VECTOR_VERSION }}-1.x86_64.rpm

  publish-docker:
    name: Publish to Docker
    runs-on: ubuntu-20.04
    needs:
      - generate-publish-metadata
      - build-x86_64-unknown-linux-gnu-packages
      - build-x86_64-unknown-linux-musl-packages
      - deb-verify
    env:
      VECTOR_VERSION: ${{ needs.generate-publish-metadata.outputs.vector_version }}
      VECTOR_BUILD_DESC: ${{ needs.generate-publish-metadata.outputs.vector_build_desc }}
      CHANNEL: ${{ needs.generate-publish-metadata.outputs.vector_release_channel }}
    steps:
      - name: Checkout Vector
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.git_ref }}
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3.0.0
        with:
          platforms: all

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3.0.0
        with:
          version: latest
          install: true
      - name: Download staged package artifacts (x86_64-unknown-linux-gnu)
        uses: actions/download-artifact@v3
        with:
          name: vector-${{ env.VECTOR_VERSION }}-x86_64-unknown-linux-gnu
          path: target/artifacts
      - name: Download staged package artifacts (x86_64-unknown-linux-musl)
        uses: actions/download-artifact@v3
        with:
          name: vector-${{ env.VECTOR_VERSION }}-x86_64-unknown-linux-musl
          path: target/artifacts
      - name: Build and publish Docker images
        env:
          PLATFORM: "linux/amd64"
        run: |
          make release-docker

  publish-s3:
    name: Publish to S3
    runs-on: ubuntu-20.04
    needs:
      - generate-publish-metadata
      - build-x86_64-unknown-linux-gnu-packages
      - build-x86_64-unknown-linux-musl-packages
      - deb-verify
      - rpm-verify
    env:
      VECTOR_VERSION: ${{ needs.generate-publish-metadata.outputs.vector_version }}
      CHANNEL: ${{ needs.generate-publish-metadata.outputs.vector_release_channel }}
    steps:
      - name: Checkout Vector
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.git_ref }}
      - name: Download staged package artifacts (x86_64-unknown-linux-gnu)
        uses: actions/download-artifact@v3
        with:
          name: vector-${{ env.VECTOR_VERSION }}-x86_64-unknown-linux-gnu
          path: target/artifacts
      - name: Download staged package artifacts (x86_64-unknown-linux-musl)
        uses: actions/download-artifact@v3
        with:
          name: vector-${{ env.VECTOR_VERSION }}-x86_64-unknown-linux-musl
          path: target/artifacts
      - name: Publish artifacts to S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.CI_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.CI_AWS_SECRET_ACCESS_KEY }}
        run: make release-s3

  publish-github:
    name: Publish to GitHub
    runs-on: ubuntu-20.04
    needs:
      - generate-publish-metadata
      - build-x86_64-unknown-linux-gnu-packages
      - build-x86_64-unknown-linux-musl-packages
      - deb-verify
      - rpm-verify
      - generate-sha256sum
    env:
      VECTOR_VERSION: ${{ needs.generate-publish-metadata.outputs.vector_version }}
    steps:
      - name: Checkout Vector
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.git_ref }}
      - name: Download staged package artifacts (x86_64-unknown-linux-gnu)
        uses: actions/download-artifact@v3
        with:
          name: vector-${{ env.VECTOR_VERSION }}-x86_64-unknown-linux-gnu
          path: target/artifacts
      - name: Download staged package artifacts (x86_64-unknown-linux-musl)
        uses: actions/download-artifact@v3
        with:
          name: vector-${{ env.VECTOR_VERSION }}-x86_64-unknown-linux-musl
          path: target/artifacts
      - name: Download artifact checksums
        uses: actions/download-artifact@v3
        with:
          name: vector-${{ env.VECTOR_VERSION }}-SHA256SUMS
          path: target/artifacts
      - name: Publish release to GitHub
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: make release-github

  publish-homebrew:
    name: Publish to Homebrew
    # We only publish to Homebrew for versioned releases, not nightlies.
    if: inputs.channel == 'release'
    runs-on: ubuntu-20.04
    needs:
      - generate-publish-metadata
      - publish-s3
    env:
      VECTOR_VERSION: ${{ needs.generate-publish-metadata.outputs.vector_version }}
    steps:
      - name: Checkout Vector
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.git_ref }}
      - name: Publish update to Homebrew tap
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PACKAGE_PUBLISHER_TOKEN }}
        run: make release-homebrew

  generate-sha256sum:
    name: Generate SHA256 checksums
    runs-on: ubuntu-20.04
    needs:
      - generate-publish-metadata
      - build-x86_64-unknown-linux-gnu-packages
      - build-x86_64-unknown-linux-musl-packages
    env:
      VECTOR_VERSION: ${{ needs.generate-publish-metadata.outputs.vector_version }}
    steps:
      - name: Checkout Vector
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.git_ref }}
      - name: Download staged package artifacts (x86_64-unknown-linux-gnu)
        uses: actions/download-artifact@v3
        with:
          name: vector-${{ env.VECTOR_VERSION }}-x86_64-unknown-linux-gnu
          path: target/artifacts
      - name: Download staged package artifacts (x86_64-unknown-linux-musl)
        uses: actions/download-artifact@v3
        with:
          name: vector-${{ env.VECTOR_VERSION }}-x86_64-unknown-linux-musl
          path: target/artifacts
      - name: Generate SHA256 checksums for artifacts
        run: make sha256sum
      - name: Stage checksum for publish
        uses: actions/upload-artifact@v3
        with:
          name: vector-${{ env.VECTOR_VERSION }}-SHA256SUMS
          path: target/artifacts/vector-${{ env.VECTOR_VERSION }}-SHA256SUMS
